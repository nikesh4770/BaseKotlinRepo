plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
}

// Creates a variable called keystorePropertiesFile, and initializes it to the
// keys.properties file.
def keysPropertiesFile = rootProject.file("keys.properties")

// Initializes a new Properties() object called keysPropertiesFile.
def keyProperties = new Properties()

// Loads the keys.properties file into the keyProperties object.
keyProperties.load(new FileInputStream(keysPropertiesFile))

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.app.recipe"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.app.recipe.HiltTestRunner"

        buildConfigField("String", "API_KEY", keyProperties["API_KEY"])
    }

    buildFeatures {
        dataBinding = true
    }

    sourceSets {
        main { java.srcDirs = ['src/main/java'] }
        test { java.srcDirs = ['src/test/java'] }
        androidTest.setRoot("src/androidTest")
        androidTest { java.srcDirs = ['src/androidTest/java'] }
    }

    signingConfigs {
        qa {
            keyAlias keyProperties["keyAlias"]
            keyPassword keyProperties["keyPassword"]
            storeFile file(keyProperties.getProperty("storeFile", "key/recipe.jks"))
            storePassword keyProperties["storePassword"]
        }
        beta {
            keyAlias keyProperties["keyAlias"]
            keyPassword keyProperties["keyPassword"]
            storeFile file(keyProperties.getProperty("storeFile", "key/recipe.jks"))
            storePassword keyProperties["storePassword"]
        }
        prod {
            keyAlias keyProperties["keyAlias"]
            keyPassword keyProperties["keyPassword"]
            storeFile file(keyProperties.getProperty("storeFile", "key/recipe.jks"))
            storePassword keyProperties["storePassword"]
        }
    }

/**
 flavorDimensions "paidMode", "androidLatest"

 productFlavors {free {dimension "paidMode"
 applicationIdSuffix ".free"}paid {dimension "paidMode"
 applicationIdSuffix ".paid"}newDimension {dimension "androidLatest"
 minSdk 31}}*/

    buildFeatures {
        dataBinding = true
    }

    buildTypes {

        qa {
            debuggable true
            minifyEnabled true
            applicationIdSuffix ".qa"
            buildConfigField("String", "API_KEY", keyProperties.getProperty("API_KEY"))
            signingConfig signingConfigs.qa
        }

        beta {
            debuggable true
            minifyEnabled true
            applicationIdSuffix ".beta"
            buildConfigField("String", "API_KEY", keyProperties.getProperty("API_KEY"))
            signingConfig signingConfigs.beta

        }

        release {
            signingConfig signingConfigs.prod
            minifyEnabled true
            buildConfigField("String", "API_KEY", keyProperties.getProperty("API_KEY"))
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    //Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.3'

    // Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:2.4.2"
    implementation "androidx.navigation:navigation-ui-ktx:2.4.2"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    //Room Database
    implementation "androidx.room:room-runtime:2.4.2"
    kapt "androidx.room:room-compiler:2.4.2"
    implementation "androidx.room:room-ktx:2.4.2"

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'

    //Hilt Jetpack Navigation
    implementation 'androidx.hilt:hilt-navigation-fragment:1.0.0'

    // Instrumented Testing Libraries
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'com.google.truth:truth:1.1.3'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.3'
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"

    // Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:2.4.2"

    //Hilt testing
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.37'
    kaptAndroidTest 'com.google.dagger:hilt-android-compiler:2.37'
    kapt "com.google.dagger:hilt-compiler:2.38.1"
    implementation("com.google.dagger:hilt-android:2.38.1") //hilt dependency

    //Mockito
    androidTestImplementation 'org.mockito:mockito-android:4.6.1'
//    androidTestImplementation 'org.mockito:mockito-core:3.4.6'
//    androidTestImplementation 'org.mockito:mockito-inline:2.21.0'


    // Unit Testing
    testImplementation 'com.google.truth:truth:1.1.3'
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    debugImplementation 'androidx.fragment:fragment-testing:1.4.1'
    //MockWebserver
    testImplementation('com.squareup.okhttp3:mockwebserver:4.9.1')

    // Needed for unit testing API
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.3'

}






/*
task helloGradle() {
    doFirst {
        println "Do this first"
    }
    println "Hello Gradle!"
    doLast {
        println "Do this last"
    }

    // Loop in gradle
    10.times { i ->
        //create new task
        tasks.register("task$i") {
            println "Hello task$i"
        }
    }
    tasks.named("task1") {
        dependsOn "task4", "task6", "task8"
    }
    dependsOn "task1"
}
*/

/**
 * test is pre-defined function. and we can add condition that this task will depend when test task executes properly
 * test is basically unit testing
 */
/*

task copyAPK(type: Copy, dependsOn: "test") {
    def source = layout.buildDirectory.dir("outputs/apk/beta/app-beta-unsigned.apk")
    def destination = "$rootDir/apk"
    from source
    into destination
    rename "app-beta-unsigned.apk", "copyTask.apk"
    doLast {
        def file = new File(destination, "copyTask.apk")
        ant.checksum file: file.path
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == "assembleDebug") {
        task.finalizedBy "copyAPK"
    }
}*/
